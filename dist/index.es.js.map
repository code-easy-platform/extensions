{"version":3,"file":"index.es.js","sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/react-observing/dist/core/Observe.js","../src/lib/WorkerMessageReceiver.ts","../src/lib/WorkerMessageSender.ts","../src/lib/runner/ExtensionWorker.ts","../src/lib/runner/ExtensionLoader.ts","../src/lib/runner/ExtensionRunner.ts","../src/lib/Extension.ts"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { v4 as uuid } from 'uuid';\n/**\n * Allows us to subscribe to changes to a value\n * @param initialValue - `T` Default value\n * @returns IObservable<T> Observable\n */\nexport function observe(initialValue) {\n    const storedListeners = [];\n    const observerId = uuid();\n    const setCurrentValue = (newValue) => {\n        initialValue = newValue;\n        storedListeners.forEach((listener) => listener.emit(newValue));\n    };\n    const getCurrentValue = () => initialValue;\n    /**\n     * Creates the subscription for the value\n     *\n     * @param fn Function performed when the value changes\n     */\n    const subscribe = (fn) => {\n        const newListener = { id: uuid(), emit: fn };\n        storedListeners.push(newListener);\n        return {\n            observerId,\n            id: newListener.id,\n            unsubscribe: () => {\n                const indexToRemove = storedListeners.findIndex(listener => listener.id === newListener.id);\n                if (indexToRemove < 0)\n                    return;\n                storedListeners.splice(indexToRemove, 1);\n            }\n        };\n    };\n    return {\n        subscribe,\n        id: observerId,\n        get value() {\n            return getCurrentValue();\n        },\n        set value(value) {\n            setCurrentValue(value);\n        }\n    };\n}\n//# sourceMappingURL=Observe.js.map","\r\nexport class WorkerMessageReceiver {\r\n  public onMessage: ((event: MessageEvent) => void) | null = null;\r\n\r\n\r\n  constructor(private _target: Window | Worker) {\r\n    this._target.addEventListener('error', this._onErrorEvent.bind(this));\r\n    this._target.addEventListener('message', this._onMessageEvent.bind(this));\r\n    this._target.addEventListener('messageerror', this._onErrorMessageEvent.bind(this));\r\n  }\r\n\r\n\r\n  private _respond(messageId: string) {\r\n    this._target.postMessage({ messageId, type: 'response' });\r\n  }\r\n\r\n  private _onMessageEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n    if (event.data.type !== 'request') return;\r\n\r\n    this.onMessage?.(event.data.payload);\r\n    this._respond(event.data.messageId);\r\n  }\r\n\r\n  private _onErrorEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n\r\n    console.log(event);\r\n  }\r\n\r\n  private _onErrorMessageEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n\r\n    console.log(event);\r\n  }\r\n}\r\n\r\n\r\n","import { IMessage } from './IMessage';\r\n\r\n\r\nexport class WorkerMessageSender {\r\n  private _messageQueue: Record<string, (() => void)> = {};\r\n\r\n\r\n  constructor(private _target: Window | Worker) {\r\n    this._target.addEventListener('message', this._onMessageEvent.bind(this));\r\n  }\r\n\r\n\r\n  public async send<T>(message: IMessage<T>) {\r\n    return new Promise((resolve, reject) => {\r\n      const newMessageId = crypto.randomUUID();\r\n\r\n      this._messageQueue[newMessageId] = () => {\r\n        delete this._messageQueue[newMessageId];\r\n        resolve('complete');\r\n      };\r\n\r\n      this._target.postMessage({\r\n        type: 'request',\r\n        payload: message,\r\n        messageId: newMessageId,\r\n      });\r\n\r\n\r\n      setTimeout(() => {\r\n        delete this._messageQueue[newMessageId];\r\n        reject('Time out');\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n\r\n  private _onMessageEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n    if (event.data.type !== 'response') return;\r\n\r\n    this._messageQueue[event.data.messageId]?.();\r\n  }\r\n}\r\n","import { WorkerMessageReceiver } from '../WorkerMessageReceiver';\nimport { WorkerMessageSender } from '../WorkerMessageSender';\nimport { IMessage } from '../IMessage';\n\n\nexport class ExtensionWorker {\n  private _worker: Worker | null = null;\n  private _workerMessageSender: WorkerMessageSender | null = null;\n  private _workerMessageReceiver: WorkerMessageReceiver | null = null;\n\n\n  private _ready = false;\n  public get ready() { return this._ready; }\n\n  private _hasError = false;\n  public get hasError() { return this._hasError; }\n\n  private _hasInitialized = false;\n  public get hasInitialized() { return this._hasInitialized; }\n\n\n  constructor(\n    url: string,\n    onReceive: (_message: IMessage) => void,\n  ) {\n    const workerUrl = URL.createObjectURL(\n      new Blob(\n        [`import(\"${url}\").then(m => new m.default(self))`],\n        { type: \"text/javascript\" }\n      )\n    );\n\n    this._worker = new Worker(workerUrl, { type: 'module' });\n    setTimeout(() => URL.revokeObjectURL(workerUrl), 0);\n\n    this._workerMessageSender = new WorkerMessageSender(this._worker);\n    this._workerMessageReceiver = new WorkerMessageReceiver(this._worker);\n\n    this._workerMessageReceiver.onMessage = message => this._onReceive(message, onReceive);\n  }\n\n\n  public async activate() {\n    await this._workerMessageSender?.send({ type: 'activate' })\n      .then(() => {\n        this._hasInitialized = true;\n      })\n      .catch(() => {\n        this._hasError = true;\n        console.warn('Failed to activate a extension');\n      });\n  }\n\n  public async deactivate() {\n    await this._workerMessageSender?.send({ type: 'deactivate' })\n      .then(() => {\n        this._worker?.terminate();\n\n        this._worker = null;\n        this._hasInitialized = false;\n        this._workerMessageSender = null;\n      })\n      .catch(() => console.warn('Failed to deactivate a extension'));\n  }\n\n  public async send<T>(message: IMessage<T>) {\n    return await this._workerMessageSender?.send(message);\n  }\n\n\n  private _onReceive(message: IMessage, onReceive: (_message: IMessage) => void,) {\n    switch (message.type) {\n      case 'ready':\n        this._ready = true;\n        onReceive(message);\n        this.activate();\n        break;\n\n      default:\n        onReceive(message);\n        break;\n    }\n  }\n}\n","import { IManifest } from './IManifest';\n\n\nexport class ExtensionLoader {\n  private _urlRoot: URL;\n  private _cancelSignal: AbortController;\n\n  public extensionPackageUrl: string;\n\n  public name: string | null = null;\n  public version: string | null = null;\n  public description: string | null = null;\n  public extensionCodeUrl: string | null = null;\n  public extensionManifestUrl: string | null = null;\n\n\n  constructor(extension: string) {\n    if (URL.canParse(extension)) {\n      if (extension.endsWith('package.json')) {\n        this._urlRoot = new URL(extension.replace('package.json', ''));\n      } else {\n        this._urlRoot = new URL(extension);\n      }\n    } else {\n      try {\n        this._urlRoot = new URL(`https://cdn.jsdelivr.net/npm/${extension}/`);\n      } catch (error) {\n        console.log(error);\n        throw new Error('Error when try to parse the extension URL');\n      }\n    }\n\n    this._cancelSignal = new AbortController();\n\n    this.extensionPackageUrl = this._urlRoot.href.concat('package.json');\n    fetch(this.extensionPackageUrl, { signal: this._cancelSignal.signal })\n      .then(res => res.json())\n      .then(data => {\n        this.name = data.name;\n        this.version = data.version;\n        this.description = data.description;\n        this.extensionCodeUrl = new URL(data.module, this._urlRoot.href).toString();\n        this.extensionManifestUrl = new URL(data.manifest, this._urlRoot.href).toString();\n\n        this.onPackageLoaded(data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  public onExtensionLoaded(_packageData: Record<string, any>, _manifest: IManifest) { }\n\n\n  public cancelLoad() {\n    this._cancelSignal.abort('Request canceled by the user');\n  }\n\n\n  private onPackageLoaded(packageData: any) {\n    if (!this.extensionManifestUrl) throw new Error('Manifest URL not found')\n    if (!this.extensionCodeUrl) throw new Error('Code URL not found')\n\n    fetch(this.extensionManifestUrl)\n      .then(res => res.json())\n      .then((manifestData) => {\n        this.onExtensionLoaded(packageData, manifestData);\n      });\n  }\n}\n","import { IObservable } from 'react-observing/dist/interfaces/IObservable';\r\nimport { observe } from 'react-observing/dist/core/Observe';\r\n\r\nimport { TFileToDownload } from './IFileToDownload';\r\nimport { ExtensionWorker } from './ExtensionWorker';\r\nimport { ExtensionLoader } from './ExtensionLoader';\r\nimport { IExporter } from '../IExporter';\r\nimport { IMessage } from '../IMessage';\r\n\r\n\r\nexport class ExtensionRunner {\r\n  public static debug = false;\r\n  private _debug(key: string, ...rest: any[]) {\r\n    if (!ExtensionRunner.debug) return;\r\n    console.log(key, ...rest);\r\n  }\r\n\r\n  private _extensionId: string;\r\n  private _extensionLoader: ExtensionLoader;\r\n  private _extensionWorker: ExtensionWorker | null = null;\r\n\r\n  public loading = observe(false);\r\n\r\n  public url: IObservable<string | null> = observe(null);\r\n  public name: IObservable<string | null> = observe(null);\r\n  public version: IObservable<string | null> = observe(null);\r\n  public packageName: IObservable<string | null> = observe(null);\r\n  public description: IObservable<string | null> = observe(null);\r\n  public exporters: IObservable<IExporter[]> = observe([]);\r\n\r\n\r\n  constructor(url: string);\r\n  constructor(packageName: string);\r\n  constructor(extensionPackageOrUrl: string) {\r\n    this._debug('start - extensionPackageOrUrl', extensionPackageOrUrl);\r\n\r\n    this.loading.value = true;\r\n    this._extensionId = crypto.randomUUID();\r\n    this._extensionLoader = new ExtensionLoader(extensionPackageOrUrl);\r\n\r\n    this._extensionLoader.onExtensionLoaded = (_packageData, _manifestData) => {\r\n      this._debug('extension - loaded', _packageData, _manifestData);\r\n\r\n      this.name.value = _manifestData.name;\r\n      this.description.value = _manifestData.description;\r\n      this.packageName.value = _manifestData.packageName;\r\n      this.version.value = this._extensionLoader.version;\r\n      this.url.value = this._extensionLoader.extensionPackageUrl;\r\n\r\n      this.exporters.value = _manifestData.exporters.map(exporterData => ({\r\n        label: exporterData.label,\r\n        description: exporterData.description,\r\n        key: `${this._extensionId}::${exporterData.key}`,\r\n        action: async (data: { project: Object }) => {\r\n          this._debug('exporter - data,exporter', data, exporterData);\r\n          await this._extensionWorker?.send({ payload: data, type: `exporters:${exporterData.key}` })\r\n        },\r\n      }));\r\n\r\n      this._extensionWorker = new ExtensionWorker(this._extensionLoader.extensionCodeUrl || '', this._onReceive.bind(this));\r\n\r\n      this.loading.value = false;\r\n    }\r\n  }\r\n\r\n\r\n  public async deactivate() {\r\n    this._extensionLoader.cancelLoad();\r\n    await this._extensionWorker?.deactivate();\r\n    ExtensionRunner.removeExporters(this.exporters.value.map(exporter => exporter.key));\r\n  }\r\n\r\n\r\n  private _onReceive(message: IMessage) {\r\n    switch (message.type) {\r\n      case 'feedback':\r\n        this._handleFeedback(message.payload);\r\n        break;\r\n      case 'download:file':\r\n        this._handleDownloadFile(message.payload);\r\n      case 'download:files':\r\n        this._handleDownloadFile(message.payload);\r\n        break;\r\n      case 'ready':\r\n        ExtensionRunner.addExporters(this.exporters.value);\r\n        break;\r\n\r\n      default: break;\r\n    }\r\n  }\r\n\r\n  private _handleDownloadFile(payload: { downloadName: string; files: TFileToDownload[]; }) {\r\n    if (!payload) return;\r\n\r\n    ExtensionRunner.downloadFiles(payload.downloadName, payload.files);\r\n  }\r\n\r\n  private _handleFeedback(payload: { message: string; type: 'warning' | 'success' | 'error' | 'info'; }) {\r\n    if (!payload) return;\r\n\r\n    ExtensionRunner.feedback(payload.message, payload.type);\r\n  }\r\n\r\n\r\n  public static addExporters(_exporters: IExporter[]) {\r\n    throw new Error(\"Download file method not implemented yet\");\r\n  }\r\n\r\n  public static removeExporters(_keys: string[]) {\r\n    throw new Error(\"Download file method not implemented yet\");\r\n  }\r\n\r\n  public static downloadFile(_fileName: string, _fileType: string, _fileContent: string) {\r\n    throw new Error(\"Download file method not implemented yet\");\r\n  }\r\n\r\n  public static downloadFiles(_downloadName: string, _files: TFileToDownload[]) {\r\n    throw new Error(\"Download files method not implemented yet\");\r\n  }\r\n\r\n  public static feedback(_message: string, _type: 'warning' | 'success' | 'error' | 'info') {\r\n    throw new Error(\"Feedback method not implemented yet\");\r\n  }\r\n}\r\n","import { WorkerMessageReceiver } from './WorkerMessageReceiver';\r\nimport { WorkerMessageSender } from './WorkerMessageSender';\r\nimport { TFileToDownload } from './runner/IFileToDownload';\r\nimport { IMessage } from './IMessage';\r\n\r\n\r\n\r\nexport abstract class Extension {\r\n  private _commands: Record<string, ((data: any) => void)> = {};\r\n\r\n  private _workerReceiver: WorkerMessageReceiver;\r\n  private _workerSender: WorkerMessageSender;\r\n\r\n\r\n  constructor(_target: Window | Worker) {\r\n    this._workerReceiver = new WorkerMessageReceiver(_target);\r\n    this._workerSender = new WorkerMessageSender(_target);\r\n\r\n    this._commands['activate'] = this.activate.bind(this);\r\n    this._commands['deactivate'] = this.deactivate.bind(this);\r\n\r\n    this._workerReceiver.onMessage = this._onEvent.bind(this);\r\n\r\n    this._handleReady();\r\n  }\r\n\r\n\r\n  /**\r\n   * First function call when extension starts.\r\n   */\r\n  public abstract activate(): void;\r\n  /**\r\n   * Last function call when extension ends.\r\n   */\r\n  public abstract deactivate(): void;\r\n\r\n\r\n  /**\r\n   * All available commands to do in the platform\r\n   */\r\n  public readonly commands = {\r\n    /**\r\n     * Allow you to add a project exporter in the platform. You can develop a code export.\r\n     * \r\n     * @param key Key of the exporter previous added\r\n     * @param action Function to be executed when the event was called\r\n     */\r\n    addExporter: async (key: string, action: ((data: any) => void)) => {\r\n      const commandKey = `${key}`;\r\n      this._commands[`exporters:${commandKey}`] = action.bind(this);\r\n    },\r\n    /**\r\n     * Used to remove the project exporter\r\n     * \r\n     * @param key Key of the exporter previous added\r\n     */\r\n    removeExporter: async (key: string) => {\r\n      const commandKey = `${key}`;\r\n      delete this._commands[`exporters:${commandKey}`];\r\n    },\r\n    /**\r\n     * Allow you to download some content in a file\r\n     * \r\n     * @param fileName Name of the generated file\r\n     * @param fileType extension of the file\r\n     * @param fileContent file content in string\r\n     */\r\n    downloadFile: async (fileName: string, fileType: string, fileContent: string) => {\r\n      await this._workerSender.send({\r\n        type: 'download:file',\r\n        payload: { fileName, fileType, fileContent },\r\n      });\r\n    },\r\n    /**\r\n     * Allow you to download a lot of files and folders as zip\r\n     * \r\n     * @param downloadName Name of the download as zip\r\n     * @param files List of files or folders to download\r\n     */\r\n    downloadFiles: async (downloadName: string, files: TFileToDownload) => {\r\n      await this._workerSender.send({\r\n        type: 'download:files',\r\n        payload: { downloadName, files },\r\n      });\r\n    },\r\n    /**\r\n     * Allow to show some feedback to the platform user\r\n     * \r\n     * @param message Message of the feedback\r\n     * @param type type of the feedback\r\n     */\r\n    feedback: async (message: string, type: 'warning' | 'success' | 'error' | 'info') => {\r\n      await this._workerSender.send({\r\n        type: 'feedback',\r\n        payload: { message, type },\r\n      });\r\n    },\r\n  } as const;\r\n\r\n\r\n  private _onEvent(message: IMessage) {\r\n    this._commands[message.type]?.(message.payload);\r\n  }\r\n\r\n  private async _handleReady() {\r\n    await this._workerSender.send({ type: 'ready' });\r\n  }\r\n}\r\n"],"names":["getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","observe","initialValue","storedListeners","observerId","uuid","setCurrentValue","newValue","listener","getCurrentValue","fn","newListener","indexToRemove","value","WorkerMessageReceiver","_target","messageId","event","_a","WorkerMessageSender","message","resolve","reject","newMessageId","_b","ExtensionWorker","url","onReceive","workerUrl","ExtensionLoader","extension","error","res","data","_packageData","_manifest","packageData","manifestData","_ExtensionRunner","extensionPackageOrUrl","_manifestData","exporterData","key","rest","exporter","payload","_exporters","_keys","_fileName","_fileType","_fileContent","_downloadName","_files","_message","_type","ExtensionRunner","Extension","action","commandKey","fileName","fileType","fileContent","downloadName","files","type"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}