{"version":3,"file":"index.es.js","sources":["../src/lib/WorkerMessageReceiver.ts","../src/lib/WorkerMessageSender.ts","../src/lib/ExtensionRunner.ts","../src/lib/Extension.ts"],"sourcesContent":["\r\nexport class WorkerMessageReceiver {\r\n  public onMessage: ((event: MessageEvent) => void) | null = null;\r\n\r\n\r\n  constructor(private _target: Window | Worker) {\r\n    this._target.addEventListener('message', this._onMessageEvent.bind(this));\r\n  }\r\n\r\n\r\n  private _respond(messageId: string) {\r\n    this._target.postMessage({ messageId, type: 'response' });\r\n  }\r\n\r\n  private _onMessageEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n    if (event.data.type !== 'request') return;\r\n\r\n    this.onMessage?.(event.data.payload);\r\n    this._respond(event.data.messageId);\r\n  }\r\n}\r\n","import { IMessage } from './IMessage';\r\n\r\n\r\nexport class WorkerMessageSender {\r\n  private _messageQueue: Record<string, (() => void)> = {};\r\n\r\n\r\n  constructor(private _target: Window | Worker) {\r\n    this._target.onerror = this._onErrorEvent.bind(this);\r\n    this._target.onmessageerror = this._onErrorMessageEvent.bind(this);\r\n\r\n    this._target.addEventListener('error', this._onErrorEvent.bind(this));\r\n    this._target.addEventListener('message', this._onMessageEvent.bind(this));\r\n    this._target.addEventListener('messageerror', this._onErrorMessageEvent.bind(this));\r\n  }\r\n\r\n\r\n  public async send<T>(message: IMessage<T>) {\r\n    return new Promise((resolve, reject) => {\r\n      const newMessageId = crypto.randomUUID();\r\n\r\n      this._messageQueue[newMessageId] = () => {\r\n        delete this._messageQueue[newMessageId];\r\n        resolve('complete');\r\n      };\r\n\r\n      this._target.postMessage({\r\n        type: 'request',\r\n        payload: message,\r\n        messageId: newMessageId,\r\n      });\r\n\r\n\r\n      setTimeout(() => {\r\n        delete this._messageQueue[newMessageId];\r\n        reject('Time out');\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n\r\n  private _onErrorEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n\r\n    console.log(event);\r\n  }\r\n\r\n  private _onErrorMessageEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n\r\n    console.log(event);\r\n  }\r\n\r\n  private _onMessageEvent(event: MessageEvent | Event) {\r\n    if (!(event instanceof MessageEvent)) return;\r\n    if (event.data.type !== 'response') return;\r\n\r\n    this._messageQueue[event.data.messageId]?.();\r\n  }\r\n}\r\n","import { WorkerMessageReceiver } from './WorkerMessageReceiver';\r\nimport { WorkerMessageSender } from './WorkerMessageSender';\r\nimport { IExporter } from './IExporter';\r\nimport { IMessage } from './IMessage';\r\n\r\n\r\nexport class ExtensionRunner {\r\n  private _worker: Worker | null = null;\r\n  private _workerMessageSender: WorkerMessageSender | null = null;\r\n  private _workerMessageReceiver: WorkerMessageReceiver | null = null;\r\n\r\n  public hasError = false;\r\n  public hasInitialized = false;\r\n\r\n\r\n  constructor(private _url: string) {}\r\n\r\n\r\n  public activate() {\r\n    this._worker = new Worker(this._url, { type: 'module' });\r\n    this._workerMessageSender = new WorkerMessageSender(this._worker);\r\n    this._workerMessageReceiver = new WorkerMessageReceiver(this._worker);\r\n\r\n    this._workerMessageReceiver.onMessage = this._onEvent.bind(this);\r\n\r\n    this._workerMessageSender.send({ type: 'activate' })\r\n      .then(() => this.hasInitialized = true)\r\n      .catch(() => console.warn('Failed to activate a extension'))\r\n  }\r\n\r\n  public deactivate() {\r\n    this._workerMessageSender?.send({ type: 'deactivate' })\r\n      .then(() => {\r\n        this._worker?.terminate();\r\n\r\n        this._worker = null;\r\n        this.hasInitialized = false;\r\n        this._workerMessageSender = null;\r\n      })\r\n      .catch(() => console.warn('Failed to deactivate a extension'));\r\n  }\r\n\r\n\r\n  private _onEvent(message: IMessage) {\r\n    switch (message.type) {\r\n      case 'add:exporter':\r\n        this._handleAddExporter(message.payload);\r\n        break;\r\n      case 'remove:exporter':\r\n        this._handleRemoveExporter(message.payload);\r\n        break;\r\n      case 'download:file':\r\n        this._handleDownloadFile(message.payload);\r\n        break;\r\n\r\n      default: break;\r\n    }\r\n  }\r\n\r\n\r\n  private _handleAddExporter(payload: Pick<IExporter, 'key' | 'label'>) {\r\n    if (!payload) return;\r\n\r\n    ExtensionRunner.addExporter({\r\n      key: payload.key,\r\n      label: payload.label,\r\n      action: async (data: { project: Object }) => {\r\n        await this._workerMessageSender?.send({ payload: data, type: `exporters:${payload.key}` })\r\n      },\r\n    });\r\n  }\r\n\r\n  private _handleRemoveExporter(payload: string) {\r\n    if (!payload) return;\r\n\r\n    ExtensionRunner.removeExporter(payload);\r\n  }\r\n\r\n  private _handleDownloadFile(payload: { fileName: string; fileType: string; fileContent: string; }) {\r\n    if (!payload) return;\r\n\r\n    ExtensionRunner.downloadFile(payload.fileName, payload.fileType, payload.fileContent);\r\n  }\r\n\r\n\r\n  public static addExporter(exporter: IExporter) {\r\n    throw new Error(\"Add exporter method not implemented yet\");\r\n  }\r\n\r\n  public static removeExporter(key: string) {\r\n    throw new Error(\"Remove exporter method not implemented yet\");\r\n  }\r\n\r\n  public static downloadFile(fileName: string, fileType: string, fileContent: string) {\r\n    throw new Error(\"Download file method not implemented yet\");\r\n  }\r\n}\r\n","import { WorkerMessageReceiver } from './WorkerMessageReceiver';\r\nimport { WorkerMessageSender } from './WorkerMessageSender';\r\nimport { IExporter } from './IExporter';\r\nimport { IMessage } from './IMessage';\r\n\r\n\r\nexport class Extension {\r\n  private _extensionId = crypto.randomUUID();\r\n  private _commands: Record<string, ((data: any) => void)> = {};\r\n\r\n  private _workerReceiver: WorkerMessageReceiver;\r\n  private _workerSender: WorkerMessageSender;\r\n\r\n\r\n  constructor(_target: Window | Worker) {\r\n    this._workerReceiver = new WorkerMessageReceiver(_target);\r\n    this._workerSender = new WorkerMessageSender(_target);\r\n\r\n    this._commands['activate'] = this.activate.bind(this);\r\n    this._commands['deactivate'] = this.deactivate.bind(this);\r\n\r\n    this._workerReceiver.onMessage = this._onEvent.bind(this);\r\n  }\r\n\r\n\r\n  public activate() { }\r\n  public deactivate() { }\r\n\r\n\r\n  public async addExporter(exporter: Pick<IExporter, 'key' | 'label'> & { action: ((data: any) => void) }) {\r\n    const commandKey = `${this._extensionId}:${exporter.key}`;\r\n\r\n    this._commands[`exporters:${commandKey}`] = exporter.action.bind(this);\r\n\r\n    await this._workerSender.send({\r\n      type: 'add:exporter',\r\n      payload: {\r\n        key: commandKey,\r\n        label: exporter.label,\r\n      },\r\n    });\r\n  }\r\n\r\n  public async removeExporter(key: string) {\r\n    const commandKey = `${this._extensionId}:${key}`;\r\n\r\n    delete this._commands[`exporters:${commandKey}`];\r\n\r\n    await this._workerSender.send({\r\n      type: 'remove:exporter',\r\n      payload: commandKey,\r\n    });\r\n  }\r\n\r\n  public async downloadFile(fileName: string, fileType: string, fileContent: string) {\r\n    await this._workerSender.send({\r\n      type: 'download:file',\r\n      payload: { fileName, fileType, fileContent },\r\n    });\r\n  }\r\n\r\n\r\n  private _onEvent(message: IMessage) {\r\n    this._commands[message.type]?.(message.payload);\r\n  }\r\n}\r\n"],"names":["WorkerMessageReceiver","_target","messageId","event","_a","WorkerMessageSender","message","resolve","reject","newMessageId","_b","ExtensionRunner","_url","payload","data","exporter","key","fileName","fileType","fileContent","Extension","commandKey"],"mappings":"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"}